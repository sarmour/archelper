import imp
import arcpy
mapping_files = imp.load_source('mapping_files',r'c:\archelper\archelper\mapping_files.py')

def shp_maxmin_byfield(shapefile, shapejoincol, aggregation_column, maxmin_cols):
    """This function will loop through a shapefile and group values based upon the specified 'aggregation_column'. The function will then calculate the maximum and minimum for each of the maxmin_cols specified. A new field will be added to the shapefile that includes "L_" and the first 8 characters of each value in the maxmin_cols. Use these new columns to label the max and min values when creating maps. Returns the new label columns"""
    newcols = []
    for col in maxmin_cols:
        newcols.append("L_" + col[:8])
    # mapping_files.shp_addcols(shapefile, newcols, "STRING")

    rows = arcpy.SearchCursor(shapefile)
    shpvallist = []
    joinlist = []
    for row in rows:
        vals = {}
        vals[aggregation_column] = row.getValue(aggregation_column)
        vals[shapejoincol] = row.getValue(shapejoincol)
        joinlist.append(vals[aggregation_column])
        for val in maxmin_cols:
            vals[val[:10]] = float(row.getValue(val[:10]))
        shpvallist.append(vals)
    # print shpvallist[:10]
    joinlist = set(joinlist)
    coldict = {}
    print joinlist
    for col in maxmin_cols:
        col = col[:10]
        newdict = {}
        for adminval in joinlist:
            vals = []
            for row in shpvallist:
                if row[aggregation_column] == adminval:
                    postalcode = str(row[shapejoincol])
                    if int(row[col]) == -9999: #use -9999 as a key for no data
                        val = ''
                    else:
                        val = row[col]
                    vals.append((postalcode, val))
                    print postalcode, val
    #         i = 0
    #         for postalcode, val in vals:
    #             if val == -9999:
    #                 pass
    #             else:
    #                 if i == 0:
    #                     maxpost, maxval = postalcode, val
    #                     minpost, minval = postalcode, val
    #                 elif val > maxval:
    #                     maxpost, maxval = postalcode, val
    #                 elif val < minval:
    #                     minpost, minval = postalcode, val
    #             i += 1
    #         i = 0
    #         newdict[adminval] = (maxpost, maxval,minpost, minval)
    #         print  adminval, maxpost, maxval, minpost, minval
    #     coldict[col] = newdict

    # for col in maxmin_cols:
    #     col = col[:10]
    #     l_col = "L_" + str(col)[:8]
    #     vals = coldict[col]
    #     del rows
    #     rows = arcpy.UpdateCursor(shapefile)
    #     for row in rows:
    #         shpjoinval = row.getValue(aggregation_column)
    #         post = row.getValue(shapejoincol)
    #         currentval = row.getValue(col)
    #         maxpost = vals[shpjoinval][0]
    #         minpost = vals[shpjoinval][2]
    #         if post in [maxpost, minpost]:
    #             row.setValue(l_col,"{0:.0f}%".format(currentval*100))
    #             rows.updateRow(row)
    # print "Finished adding the max and min percent change values to the shapefile. Here are the new column headers"
    # print newcols
    # return newcols





shpfile = "C:\Mapping_Project\Shapefiles\EUFL_RL15_Zips.shp"
shpjoincol = "JOIN"
perchangecols = ['PC_Haz', 'PC_Vuln', 'PC_PLA_Wind', 'PC_Overall']


labels = shp_maxmin_byfield(shpfile, shpjoincol, 'Admin1ID', perchangecols)



